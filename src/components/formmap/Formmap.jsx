import { IdCard } from "lucide-react";
import { useState, useEffect } from "react";

export default function RegisterSeniorForm() {
    const [formData, setFormData] = useState({
        category: "",
        citizenId: "",
        prefix: "",
        firstName: "",
        lastName: "",
        birthDate: "",
        community: "",
        cityId: "",
        location: { lat: "", long: "" },
        age: "",
    });

    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"
    const [isLocationActive, setIsLocationActive] = useState(true);
    const [selectedCategory, setSelectedCategory] = useState("");
    const [communities, setCommunities] = useState([]);
    const [cities, setCities] = useState([]);

    useEffect(() => {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏à‡∏≤‡∏Å backend
        fetch("/api/communities")
            .then((response) => response.json())
            .then((data) => setCommunities(data));

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏Å backend
        fetch("/api/cities")
            .then((response) => response.json())
            .then((data) => setCities(data));
    }, []);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const formatCitizenId = (value) => {
        const onlyNumbers = value.replace(/\D/g, "");

        let formatted = onlyNumbers;
        if (onlyNumbers.length > 1) formatted = onlyNumbers.slice(0, 1) + "-" + onlyNumbers.slice(1);
        if (onlyNumbers.length > 5) formatted = formatted.slice(0, 5) + "-" + formatted.slice(5);
        if (onlyNumbers.length > 10) formatted = formatted.slice(0, 10) + "-" + formatted.slice(10);
        if (onlyNumbers.length > 12) formatted = formatted.slice(0, 13) + "-" + formatted.slice(13);

        return formatted.slice(0, 17); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
    };

    const handleCitizenIdChange = (e) => {
        const value = e.target.value;

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏µ‡∏î‡πÉ‡∏ô input ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const formattedId = formatCitizenId(value);

        setFormData((prev) => ({
            ...prev,
            citizenId: formattedId,
        }));
    };

    const calculateAge = (birthDate) => {
        const today = new Date();
        const birthDateObj = new Date(birthDate);
        let age = today.getFullYear() - birthDateObj.getFullYear();
        const month = today.getMonth();
        if (month < birthDateObj.getMonth() || (month === birthDateObj.getMonth() && today.getDate() < birthDateObj.getDate())) {
            age--;
        }
        return age;
    };

    const handleBirthDateChange = (e) => {
        const newBirthDate = e.target.value;
        setFormData((prev) => ({
            ...prev,
            birthDate: newBirthDate,
            age: calculateAge(newBirthDate),
        }));
    };

    const getLocation = () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const lat = position.coords.latitude;
                    const long = position.coords.longitude;
                    setFormData((prev) => ({
                        ...prev,
                        location: { lat: lat.toFixed(6), long: long.toFixed(6) },
                    }));
                    console.log("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", lat, long);
                },
                (error) => {
                    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", error);
                },
                {
                    enableHighAccuracy: true,
                    maximumAge: 0,
                }
            );
        } else {
            console.log("‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Geolocation");
        }
    };

    const handleSubmit = () => {
        const citizenIdWithoutHyphen = formData.citizenId.replace(/-/g, "");

        const payload = {
            geometry: {
                type: "Point",
                coordinates: [parseFloat(formData.location.long), parseFloat(formData.location.lat)],
            },
            properties: {
                name: formData.firstName + " " + formData.lastName,
                markerType: formData.selectedCategory,
                users: {
                    firstName: formData.firstName,
                    lastName: formData.lastName,
                    gender: formData.prefix,
                    IdCard: citizenIdWithoutHyphen,
                    birthDate: formData.birthDate,
                    age: formData.age,

                },
            },
        };

        if (!isLocationActive) {
            delete payload.geometry.coordinates;
        }

        fetch("http://localhost:3000/markers", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(payload),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then((data) => {
                console.log("Marker created successfully:", data);
            })
            .catch((error) => {
                console.error("Error creating marker:", error);
            });

    };

    return (
        <div className="max-w-lg mx-auto p-6 bg-white rounded-lg shadow-md space-y-4">
            <h2 className="text-xl font-semibold text-gray-800 text-center">üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á</h2>

            {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
            <div>
                <label className="block text-gray-700 text-sm font-medium">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</label>
                <select
                    name="community"
                    className="bg-gray-50 border border-gray-300 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                    placeholder="‡πÄ"
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                >
                    <option value="" disabled>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>
                    <option value="‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏">‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏</option>
                    <option value="‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ä‡∏∏‡∏°‡∏ä‡∏ô">‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ä‡∏∏‡∏°‡∏ä‡∏ô</option>
                    <option value="‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå‡∏ä‡∏∏‡∏°‡∏ä‡∏ô">‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå‡∏ä‡∏∏‡∏°‡∏ä‡∏ô</option>
                    <option value="‡∏≠‡∏™‡∏°">‡∏≠‡∏™‡∏°</option>
                    <option value="‡∏Å‡∏π‡πâ‡∏†‡∏±‡∏¢">‡∏Å‡∏π‡πâ‡∏†‡∏±‡∏¢</option>
                </select>
            </div>

            {/* ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô */}
            <div>
                <label className="block text-gray-600 text-sm">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (13 ‡∏´‡∏•‡∏±‡∏Å)</label>
                <input
                    type="text"
                    name="citizenId"
                    className="w-full p-2 border rounded text-sm tracking"
                    value={formData.citizenId}
                    onChange={handleCitizenIdChange}
                    maxLength="17"
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
                />
            </div>

            {/* ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤, ‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• */}
            <div>
                <label className="block text-gray-700 text-sm font-medium">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                <div className="grid grid-cols-3 gap-2">
                    <select
                        name="prefix"
                        className="bg-gray-50 border border-gray-300 text-sm rounded focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                        value={formData.prefix}
                        onChange={handleChange}
                    >
                        <option value="" disabled>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>
                        <option value="‡∏ô‡∏≤‡∏¢">‡∏ô‡∏≤‡∏¢</option>
                        <option value="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</option>
                        <option value="‡∏ô‡∏≤‡∏á">‡∏ô‡∏≤‡∏á</option>
                    </select>
                    <input
                        type="text"
                        name="firstName"
                        placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                        className="p-2 border rounded text-sm "
                        value={formData.firstName}
                        onChange={handleChange}
                    />
                    <input
                        type="text"
                        name="lastName"
                        placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                        className="p-2 border rounded text-sm "
                        value={formData.lastName}
                        onChange={handleChange}
                    />
                </div>
            </div>

            {/* ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î & ‡∏≠‡∏≤‡∏¢‡∏∏ */}
            <div className="grid grid-cols-2 gap-2">
                <div>
                    <label className="block text-gray-700 text-sm font-medium">‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î</label>
                    <input
                        type="date"
                        name="birthDate"
                        className="w-full p-2 border rounded"
                        value={formData.birthDate}
                        onChange={handleBirthDateChange}
                    />
                </div>
                <div>
                    <label className="block text-gray-700 text-sm font-medium">‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)</label>
                    <input
                        type="text"
                        name="age"
                        value={formData.age}
                        readOnly
                        className="w-full p-2 border rounded bg-gray-100"
                    />
                </div>
            </div>

            {/* ‡∏ä‡∏∏‡∏°‡∏ä‡∏ô */}
            <div>
                <label className="block text-gray-700 text-sm font-medium">‡∏ä‡∏∏‡∏°‡∏ä‡∏ô</label>
                <select
                    name="community"
                    className="w-full p-2 border rounded text-sm "
                    value={formData.community}
                    onChange={handleChange}
                >
                    {communities.map((community) => (
                        <option key={community.id} value={community.name}>
                            {community.name}
                        </option>
                    ))}
                </select>
            </div>

            {/* ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏°‡∏∑‡∏≠‡∏á */}
            <div>
                <label className="block text-gray-700 text-sm font-medium">‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏°‡∏∑‡∏≠‡∏á</label>
                <input
                    type="text"
                    name="cityId"
                    placeholder="‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏°‡∏∑‡∏≠‡∏á"
                    className="w-full p-2 border rounded text-sm "
                    value={formData.cityId}
                    onChange={handleChange}
                />
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á */}
            <div className="flex items-center justify-between">
                <label className="text-gray-700 text-sm font-medium">‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</label>
                <div className="flex items-center space-x-4">
                    <input type="radio" id="enableLocation" checked={isLocationActive} onChange={() => setIsLocationActive(true)} />
                    <label htmlFor="enableLocation">‡πÄ‡∏õ‡∏¥‡∏î</label>
                    <input type="radio" id="disableLocation" checked={!isLocationActive} onChange={() => setIsLocationActive(false)} />
                    <label htmlFor="disableLocation">‡∏õ‡∏¥‡∏î</label>
                </div>
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á */}
            <button
                className={`w-full p-2 text-white rounded ${isLocationActive ? "bg-blue-500 hover:bg-blue-600" : "bg-gray-400"}`}
                onClick={getLocation}
                disabled={!isLocationActive}
            >
                ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            </button>

            {/* Lat & Long */}
            <div className="grid grid-cols-2 gap-2">
                <input
                    type="text"
                    name="lat"
                    placeholder="‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î"
                    className="p-2 border rounded bg-gray-100"
                    value={formData.location.lat}
                    readOnly
                    disabled={!isLocationActive}
                />
                <input
                    type="text"
                    name="long"
                    placeholder="‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î"
                    className="p-2 border rounded bg-gray-100"
                    value={formData.location.long}
                    readOnly
                    disabled={!isLocationActive}
                />
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô */}
            <button
                type="button"
                className="w-full p-2 bg-green-500 text-white rounded"
                onClick={handleSubmit}
            >
                ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
            </button>
        </div>
    );
}
